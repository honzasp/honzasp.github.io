// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var Game, Map, Menu, Tank, Window;
    Menu = (function() {
      function Menu($root) {
        var _this = this;
        this.$root = $root;
        this.$menu = $("<div></div>").appendTo(this.$root);
        this.$playBtn = $("<button>Play</button>").appendTo(this.$menu);
        this.$playBtn.click(function() {
          return _this.play();
        });
      }

      Menu.prototype.play = function() {
        var settings;
        settings = {
          "fps": 20,
          "map width": 100,
          "map height": 50
        };
        if (this.game == null) {
          this.game = new Game(this.$root, settings);
          return this.game.start();
        }
      };

      return Menu;

    })();
    Game = (function() {
      function Game($root, settings) {
        this.settings = settings;
        this.dom = {};
        this.dom.$root = $root;
        this.dom.$main = $("<div />").appendTo(this.dom.$root);
        this.dom.$canvas = $("<canvas />").appendTo(this.dom.$main);
        this.map = new Map(this.settings["map width"], this.settings["map height"]);
        this.map.set(2, 3, Map.ROCK);
        this.map.set(4, 3, Map.ROCK);
        this.ctx = this.dom.$canvas[0].getContext("2d");
        this.resize(800, 600);
        this.tanks = [new Tank(this, 1.8, 2.0)];
        this.tanks[0].vel = {
          x: 0.6,
          y: 0.9
        };
        this.tickLen = 1.0 / this.settings["fps"];
      }

      Game.prototype.resize = function(width, height) {
        this.dom.$canvas.attr("width", width);
        this.dom.$canvas.attr("height", height);
        return this.dim = {
          width: width,
          height: height
        };
      };

      Game.prototype.tick = function() {
        this.update(this.tickLen);
        return this.draw();
      };

      Game.prototype.draw = function() {
        return new Window(this, this.tanks[0].pos, {
          x: 0,
          y: 0,
          w: this.dim.width,
          h: this.dim.height,
          scale: 16
        });
      };

      Game.prototype.update = function(t) {
        var i, _i, _ref;
        for (i = _i = 0, _ref = this.tanks.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.tanks[i].update(t);
        }
        return void 0;
      };

      Game.prototype.start = function() {
        var _this = this;
        return setInterval((function() {
          return _this.tick();
        }), 1000 * this.tickLen);
      };

      return Game;

    })();
    Window = (function() {
      function Window(game, center, dim) {
        this.game = game;
        this.center = center;
        this.dim = dim;
        this.ctx = this.game.ctx;
        this.ctx.save();
        this.ctx.translate(this.dim.x, this.dim.y);
        this.ctx.beginPath();
        this.ctx.rect(0, 0, this.dim.w, this.dim.h);
        this.ctx.clip();
        this.drawTiles();
        this.drawObjects();
        this.ctx.restore();
      }

      Window.prototype.drawTiles = function() {
        var bot, left, right, top, x, y, _i, _j, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        _ref = this.winToMap({
          x: 0,
          y: 0
        }), left = _ref.x, top = _ref.y;
        _ref1 = this.winToMap({
          x: this.dim.w,
          y: this.dim.h
        }), right = _ref1.x, bot = _ref1.y;
        for (x = _i = _ref2 = Math.floor(left), _ref3 = Math.ceil(right); _ref2 <= _ref3 ? _i <= _ref3 : _i >= _ref3; x = _ref2 <= _ref3 ? ++_i : --_i) {
          for (y = _j = _ref4 = Math.floor(top), _ref5 = Math.ceil(bot); _ref4 <= _ref5 ? _j <= _ref5 : _j >= _ref5; y = _ref4 <= _ref5 ? ++_j : --_j) {
            this.drawTile({
              x: x,
              y: y
            });
          }
        }
        return void 0;
      };

      Window.prototype.drawObjects = function() {
        var i, _i, _ref;
        this.ctx.save();
        this.ctx.translate(this.dim.w * 0.5, this.dim.h * 0.5);
        this.ctx.scale(this.dim.scale, this.dim.scale);
        this.ctx.translate(-this.center.x, -this.center.y);
        for (i = _i = 0, _ref = this.game.tanks.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.game.tanks[i].draw(this.ctx);
        }
        return this.ctx.restore();
      };

      Window.prototype.drawTile = function(pos) {
        var winPos;
        winPos = this.mapToWin(pos);
        this.ctx.fillStyle = this.tileColor(this.game.map.get(pos.x, pos.y));
        return this.ctx.fillRect(winPos.x, winPos.y, this.dim.scale + 0.5, this.dim.scale + 0.5);
      };

      Window.prototype.tileColor = function(tile) {
        switch (tile) {
          case Map.EMPTY:
            return "#333";
          case Map.ROCK:
            return "#aaa";
          case Map.CONCRETE:
            return "#ccc";
          case Map.VOID:
            return "#000";
          default:
            return "#f00";
        }
      };

      Window.prototype.mapToWin = function(m) {
        return {
          x: this.dim.scale * (m.x - this.center.x) + this.dim.w * 0.5,
          y: this.dim.scale * (m.y - this.center.y) + this.dim.h * 0.5
        };
      };

      Window.prototype.winToMap = function(w) {
        return {
          x: this.center.x + (w.x - this.dim.w * 0.5) / this.dim.scale,
          y: this.center.y + (w.y - this.dim.h * 0.5) / this.dim.scale
        };
      };

      Window.prototype.drawCircle = function(pos, radius) {
        var winPos, winRadius;
        winPos = this.mapToWin(pos);
        winRadius = radius * this.dim.scale;
        this.ctx.beginPath();
        this.ctx.fillStyle = "#f00";
        this.ctx.arc(winPos.x, winPos.y, winRadius, 0, Math.PI * 2);
        return this.ctx.fill();
      };

      return Window;

    })();
    Tank = (function() {
      Tank.RADIUS = 0.6;

      function Tank(game, x, y) {
        this.game = game;
        this.rot = 0;
        this.pos = {
          x: x,
          y: y
        };
        this.vel = {
          x: 0,
          y: 0
        };
      }

      Tank.prototype.update = function(t) {
        var hit,
          _this = this;
        this.pos = {
          x: this.pos.x + this.vel.x * t,
          y: this.pos.y + this.vel.y * t
        };
        hit = function(x, y) {
          return _this.game.map.get(Math.floor(x), Math.floor(y)) !== Map.EMPTY;
        };
        if (hit(this.pos.x + Tank.RADIUS, this.pos.y)) {
          this.pos.x = Math.floor(this.pos.x + Tank.RADIUS) - Tank.RADIUS;
          this.vel.x = -this.vel.x;
        } else if (hit(this.pos.x - Tank.RADIUS, this.pos.y)) {
          this.pos.x = Math.floor(this.pos.x - Tank.RADIUS) + 1 + Tank.RADIUS;
          this.vel.x = -this.vel.x;
        }
        if (hit(this.pos.x, this.pos.y + Tank.RADIUS)) {
          this.pos.y = Math.floor(this.pos.y + Tank.RADIUS) - Tank.RADIUS;
          return this.vel.y = -this.vel.y;
        } else if (hit(this.pos.x, this.pos.y - Tank.RADIUS)) {
          this.pos.y = Math.floor(this.pos.y - Tank.RADIUS) + 1 + Tank.RADIUS;
          return this.vel.y = -this.vel.y;
        }
      };

      Tank.prototype.draw = function(ctx) {
        ctx.save();
        ctx.translate(this.pos.x, this.pos.y);
        ctx.rotate(this.rot);
        ctx.scale(Tank.RADIUS, Tank.RADIUS);
        ctx.beginPath();
        ctx.arc(0, 0, 1.0, 0, Math.PI * 2);
        ctx.fillStyle = "#d33";
        ctx.fill();
        ctx.beginPath();
        ctx.moveTo(0.0, -0.6);
        ctx.lineTo(-0.4, 0.4);
        ctx.lineTo(0.4, 0.4);
        ctx.lineTo(0.0, -0.6);
        ctx.fillStyle = "#a00";
        ctx.fill();
        return ctx.restore();
      };

      return Tank;

    })();
    Map = (function() {
      Map.EMPTY = 0;

      Map.ROCK = 1;

      Map.CONCRETE = 2;

      Map.STEEL = 3;

      Map.VOID = 255;

      function Map(width, height) {
        var ary, i;
        this.width = width;
        this.height = height;
        this.ary = (function() {
          var _i, _ref;
          if (typeof Uint8Array !== "undefined" && Uint8Array !== null) {
            return new Uint8Array(this.width * this.height);
          } else {
            ary = new Array(this.width * this.height);
            for (i = _i = 0, _ref = this.width * height; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              ary[i] = Map.EMPTY;
            }
            return ary;
          }
        }).call(this);
      }

      Map.prototype.get = function(x, y) {
        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {
          return this.ary[x * this.height + y];
        } else {
          return Map.VOID;
        }
      };

      Map.prototype.set = function(x, y, val) {
        if (x >= 0 && x < this.width && y >= 0 && y < this.height) {
          return this.ary[x * this.height + y] = val;
        }
      };

      return Map;

    })();
    return new Menu($("#krt"));
  });

}).call(this);
