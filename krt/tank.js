// Generated by CoffeeScript 1.6.3
(function() {
  define(["map", "weapon", "bullet", "game"], function(Map, Weapon, Bullet, Game) {
    var Tank;
    Tank = function(idx, x, y, angle, color) {
      this.index = idx;
      this.pos = {
        x: x,
        y: y
      };
      this.angle = angle;
      this.vel = {
        x: 0,
        y: 0
      };
      this.acc = 0;
      this.rot = 0;
      this.firing = false;
      this.setEnergy(Tank.START_ENERGY);
      this.setMass(Tank.START_MASS);
      this.weapons = [new Weapon(Weapon.MachineGun), new Weapon(Weapon.MiningGun), new Weapon(Weapon.EmergencyGun), new Weapon(Weapon.Autocannon), new Weapon(Weapon.HugeCannon)];
      this.activeWeapon = 0;
      return this.color = color;
    };
    Tank.WALL_DISTANCE = 0.01;
    Tank.FORCE = 1500;
    Tank.FRICTION = 100;
    Tank.ANGULAR_SPEED = 1.5 * Math.PI;
    Tank.FIRING_ANGULAR_SPEED = 0.5 * Math.PI;
    Tank.BUMP_FACTOR = 0.3;
    Tank.BULLET_DIST = 1.2;
    Tank.START_ENERGY = 1000;
    Tank.START_MASS = 100;
    Tank.MIN_FIRE_ENERGY = 10;
    Tank.MIN_MASS = 50;
    Tank.LIVE_ENERGY_CONSUM = 3;
    Tank.MOVE_ENERGY_CONSUM = 8;
    Tank.DENSITY = 120;
    Tank.prototype.change = function() {
      return this.activeWeapon = (this.activeWeapon + 1) % this.weapons.length;
    };
    Tank.prototype.fire = function(game) {
      var angle, posX, posY, relVelX, relVelY, spec, weapon;
      spec = (weapon = this.weapons[this.activeWeapon]).spec;
      if (!(weapon.temperature <= 0)) {
        return;
      }
      if (!(this.mass - spec.bullet.mass >= Tank.MIN_MASS)) {
        return;
      }
      if (!(this.energy - spec.energy >= Tank.MIN_FIRE_ENERGY)) {
        return;
      }
      angle = this.angle + (2 * spec.angleVariance * Math.random()) - spec.angleVariance;
      posX = this.pos.x + Math.sin(angle) * this.radius * Tank.BULLET_DIST;
      posY = this.pos.y + Math.cos(angle) * this.radius * Tank.BULLET_DIST;
      relVelX = Math.sin(angle) * spec.bullet.speed;
      relVelY = Math.cos(angle) * spec.bullet.speed;
      game.bullets.push(new Bullet({
        x: posX,
        y: posY
      }, {
        x: this.vel.x + relVelX,
        y: this.vel.y + relVelY
      }, spec.bullet, this.index));
      weapon.temperature = spec.cooldown;
      this.setMass(this.mass - spec.bullet.mass, game);
      this.setEnergy(this.energy - spec.energy, game);
      return this.impulse({
        x: -relVelX * spec.bullet.mass,
        y: -relVelY * spec.bullet.mass
      });
    };
    Tank.prototype.hurt = function(game, dmg, guilty) {
      if (guilty == null) {
        guilty = void 0;
      }
      return this.setEnergy(this.energy - dmg, game, guilty);
    };
    Tank.prototype.receive = function(game, content) {
      if (content.energy != null) {
        this.setEnergy(this.energy + content.energy, game);
      }
      if (content.mass != null) {
        return this.setMass(this.mass + content.mass, game);
      }
    };
    Tank.prototype.setEnergy = function(energy, game, guilty) {
      if (guilty == null) {
        guilty = void 0;
      }
      if (energy < 0) {
        this.energy = 0;
        return Game.tankDestroyed(game, this.index, guilty);
      } else {
        return this.energy = energy;
      }
    };
    Tank.prototype.setMass = function(mass, game, guilty) {
      if (guilty == null) {
        guilty = void 0;
      }
      this.mass = mass;
      this.radius = Math.sqrt(this.mass / Tank.DENSITY / Math.PI);
      if (mass < Tank.MIN_MASS) {
        return Game.tankDestroyed(game, this.index, guilty);
      }
    };
    Tank.prototype.impulse = function(imp) {
      this.vel.x += imp.x / this.mass;
      return this.vel.y += imp.y / this.mass;
    };
    Tank.prototype.update = function(game, t) {
      var forceX, forceY, weapon, _i, _len, _ref;
      _ref = this.weapons;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        weapon = _ref[_i];
        if (weapon.temperature > 0) {
          weapon.temperature -= t;
        }
      }
      this.pos.x += this.vel.x * t;
      this.pos.y += this.vel.y * t;
      forceX = -this.vel.x * Tank.FRICTION + this.acc * Math.sin(this.angle) * Tank.FORCE;
      forceY = -this.vel.y * Tank.FRICTION + this.acc * Math.cos(this.angle) * Tank.FORCE;
      this.vel.x += forceX * t / this.mass;
      this.vel.y += forceY * t / this.mass;
      if (this.firing) {
        this.angle += this.rot * Tank.FIRING_ANGULAR_SPEED * t;
        this.fire(game);
      } else {
        this.angle += this.rot * Tank.ANGULAR_SPEED * t;
      }
      this.setEnergy(this.energy - Tank.LIVE_ENERGY_CONSUM * t, game);
      if (this.acc !== 0 || this.rot !== 0) {
        return this.setEnergy(this.energy - Tank.MOVE_ENERGY_CONSUM * t, game);
      }
    };
    Tank.prototype.draw = function(ctx) {
      ctx.save();
      ctx.translate(this.pos.x, this.pos.y);
      ctx.rotate(-this.angle);
      ctx.scale(this.radius, this.radius);
      ctx.beginPath();
      ctx.arc(0, 0, 1.0, 0, Math.PI * 2);
      ctx.fillStyle = this.color;
      ctx.fill();
      ctx.beginPath();
      ctx.moveTo(0.0, 0.6);
      ctx.lineTo(-0.4, -0.4);
      ctx.lineTo(0.4, -0.4);
      ctx.lineTo(0.0, 0.6);
      ctx.fillStyle = "#333";
      ctx.fill();
      return ctx.restore();
    };
    return Tank;
  });

}).call(this);
