// Generated by CoffeeScript 1.6.3
(function() {
  define(["map", "bullet", "game"], function(Map, Bullet, Game) {
    var Tank;
    Tank = function(idx, x, y, angle) {
      if (angle == null) {
        angle = 0;
      }
      this.index = idx;
      this.pos = {
        x: x,
        y: y
      };
      this.angle = angle;
      this.vel = {
        x: 0,
        y: 0
      };
      this.acc = 0;
      this.rot = 0;
      this.energy = Tank.MAX_ENERGY;
      return this.matter = Tank.MAX_MATTER;
    };
    Tank.RADIUS = 0.45;
    Tank.WALL_DISTANCE = 0.01;
    Tank.MASS = 100;
    Tank.FORCE = 1000;
    Tank.FRICTION = 100;
    Tank.ANGULAR_SPEED = 1.5 * Math.PI;
    Tank.BUMP_FACTOR = 0.3;
    Tank.BULLET_SPEED = 100;
    Tank.BULLET_TIME = 2;
    Tank.BULLET_DIST = 1.2;
    Tank.MAX_ENERGY = 100;
    Tank.MAX_MATTER = 100;
    Tank.prototype.fire = function(game) {
      var pos, relVel, vel;
      pos = {
        x: this.pos.x + Math.sin(this.angle) * Tank.RADIUS * Tank.BULLET_DIST,
        y: this.pos.y + Math.cos(this.angle) * Tank.RADIUS * Tank.BULLET_DIST
      };
      relVel = {
        x: Math.sin(this.angle) * Tank.BULLET_SPEED,
        y: Math.cos(this.angle) * Tank.BULLET_SPEED
      };
      vel = {
        x: relVel.x + this.vel.x,
        y: relVel.y + this.vel.y
      };
      game.bullets.push(new Bullet(pos, vel, Tank.BULLET_TIME));
      return this.impulse({
        x: -relVel.x * Bullet.MASS,
        y: -relVel.y * Bullet.MASS
      });
    };
    Tank.prototype.damage = function(game, dmg) {
      if (this.energy > dmg) {
        return this.energy -= dmg;
      } else {
        this.energy = 0;
        return Game.tankDestroyed(game, this.index);
      }
    };
    Tank.prototype.impulse = function(imp) {
      this.vel.x += imp.x / Tank.MASS;
      return this.vel.y += imp.y / Tank.MASS;
    };
    Tank.prototype.move = function(t) {
      var forceX, forceY;
      forceX = -this.vel.x * Tank.FRICTION + this.acc * Math.sin(this.angle) * Tank.FORCE;
      forceY = -this.vel.y * Tank.FRICTION + this.acc * Math.cos(this.angle) * Tank.FORCE;
      this.vel.x += forceX * t / Tank.MASS;
      this.vel.y += forceY * t / Tank.MASS;
      this.pos.x += this.vel.x * t;
      this.pos.y += this.vel.y * t;
      return this.angle += this.rot * Tank.ANGULAR_SPEED * t;
    };
    Tank.prototype.draw = function(ctx) {
      ctx.save();
      ctx.translate(this.pos.x, this.pos.y);
      ctx.rotate(-this.angle);
      ctx.scale(Tank.RADIUS, Tank.RADIUS);
      ctx.beginPath();
      ctx.arc(0, 0, 1.0, 0, Math.PI * 2);
      ctx.fillStyle = "#833";
      ctx.fill();
      ctx.beginPath();
      ctx.moveTo(0.0, 0.6);
      ctx.lineTo(-0.4, -0.4);
      ctx.lineTo(0.4, -0.4);
      ctx.lineTo(0.0, 0.6);
      ctx.fillStyle = "#333";
      ctx.fill();
      return ctx.restore();
    };
    return Tank;
  });

}).call(this);
