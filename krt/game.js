// Generated by CoffeeScript 1.6.3
(function() {
  define(["exports", "jquery", "map", "render", "tank", "bullet", "particle", "collisions", "update"], function(exports, $, Map, Render, Tank, Bullet, Particle, Collisions, Update) {
    var Game;
    Game = exports;
    Game.MAX_GARBAGE_RATIO = 0.5;
    Game.init = function(settings, callback) {
      var def, game, idx, info, map, playerInfos;
      map = Map.gen(settings);
      playerInfos = (function() {
        var _i, _len, _ref, _results;
        _ref = settings.playerDefs;
        _results = [];
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          def = _ref[idx];
          _results.push({
            index: idx,
            base: map.bases[idx],
            destroyed: 0,
            hits: 0,
            keys: def.keys,
            color: def.color,
            name: def.name
          });
        }
        return _results;
      })();
      game = {
        dom: Game.dom.init(),
        map: map,
        tanks: (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = playerInfos.length; _i < _len; _i++) {
            info = playerInfos[_i];
            _results.push(Game.createTank(game, info));
          }
          return _results;
        })(),
        bullets: [],
        particles: [],
        bonuses: [],
        time: 0,
        size: {
          x: 800,
          y: 600
        },
        events: void 0,
        tickLen: 1.0 / settings["fps"],
        timer: void 0,
        playerInfos: playerInfos,
        callback: callback,
        mode: settings.mode,
        useHud: settings.useHud,
        useNameTags: settings.useNameTags
      };
      Game.dom.resizeCanvas(game);
      Game.dom.rebindListeners(game);
      return game;
    };
    Game.deinit = function(game) {
      Game.stop(game);
      Game.dom.unbindListeners(game);
      Game.dom.restore(game);
      return game.callback();
    };
    Game.createTank = function(game, playerInfo) {
      var color, idx, x, y, _ref;
      idx = playerInfo.index, (_ref = playerInfo.base, x = _ref.x, y = _ref.y), color = playerInfo.color;
      return new Tank(idx, x + Map.BASE_SIZE / 2, y + Map.BASE_SIZE / 2, 0, color);
    };
    Game.tankDestroyed = function(game, index, guilty) {
      if (guilty == null) {
        guilty = void 0;
      }
      if (guilty != null) {
        game.playerInfos[guilty].hits += 1;
      }
      game.playerInfos[index].destroyed += 1;
      switch (game.mode.mode) {
        case "lives":
          if (game.playerInfos[index].destroyed >= game.mode.lives) {
            Game.finish(game);
          }
          break;
        case "hits":
          if ((guilty != null) && game.playerInfos[guilty].hits >= game.mode.hits) {
            Game.finish(game);
          }
      }
      if (game.playerInfos[index].lives <= 0) {
        return Game.finish(game);
      }
    };
    Game.boom = function(game, pos, spec) {
      return Update.boom(game, pos, spec);
    };
    Game.events = function(game) {
      var backwardOff, backwardOn, changeOn, fireOff, fireOn, forwardOff, forwardOn, leftOff, leftOn, rightOff, rightOn;
      forwardOn = function(idx) {
        return game.tanks[idx].acc = 1;
      };
      backwardOn = function(idx) {
        return game.tanks[idx].acc = -1;
      };
      leftOn = function(idx) {
        return game.tanks[idx].rot = 1;
      };
      rightOn = function(idx) {
        return game.tanks[idx].rot = -1;
      };
      fireOn = function(idx) {
        return game.tanks[idx].firing = true;
      };
      changeOn = function(idx) {
        return game.tanks[idx].change();
      };
      forwardOff = function(idx) {
        if (game.tanks[idx].acc > 0) {
          return game.tanks[idx].acc = 0;
        }
      };
      backwardOff = function(idx) {
        if (game.tanks[idx].acc < 0) {
          return game.tanks[idx].acc = 0;
        }
      };
      leftOff = function(idx) {
        if (game.tanks[idx].rot > 0) {
          return game.tanks[idx].rot = 0;
        }
      };
      rightOff = function(idx) {
        if (game.tanks[idx].rot < 0) {
          return game.tanks[idx].rot = 0;
        }
      };
      fireOff = function(idx) {
        return game.tanks[idx].firing = false;
      };
      return {
        keydown: function(evt) {
          var idx, keys, _i, _len, _ref;
          if (evt.which === 27) {
            Game.pause(game);
          }
          _ref = game.playerInfos;
          for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
            keys = _ref[idx].keys;
            if (evt.which === keys.forward) {
              forwardOn(idx);
            }
            if (evt.which === keys.backward) {
              backwardOn(idx);
            }
            if (evt.which === keys.left) {
              leftOn(idx);
            }
            if (evt.which === keys.right) {
              rightOn(idx);
            }
            if (evt.which === keys.fire) {
              fireOn(idx);
            }
            if (evt.which === keys.change) {
              changeOn(idx);
            }
          }
          return void 0;
        },
        keyup: function(evt) {
          var idx, keys, _i, _len, _ref;
          _ref = game.playerInfos;
          for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
            keys = _ref[idx].keys;
            if (evt.which === keys.forward) {
              forwardOff(idx);
            }
            if (evt.which === keys.backward) {
              backwardOff(idx);
            }
            if (evt.which === keys.left) {
              leftOff(idx);
            }
            if (evt.which === keys.right) {
              rightOff(idx);
            }
            if (evt.which === keys.fire) {
              fireOff(idx);
            }
          }
          return void 0;
        },
        resize: function(evt) {
          return Game.dom.resizeCanvas(game);
        }
      };
    };
    Game.start = function(game) {
      if (game.timer != null) {
        Game.stop(game);
      }
      return game.timer = setInterval((function() {
        return Game.tick(game);
      }), game.tickLen * 1000);
    };
    Game.stop = function(game) {
      if (game.timer != null) {
        clearInterval(game.timer);
      }
      return game.timer = void 0;
    };
    Game.pause = function(game) {
      Game.stop(game);
      Game.dom.unbindListeners(game);
      return Game.dom.showPauseBox(game);
    };
    Game.resume = function(game) {
      Game.dom.hidePauseBox(game);
      Game.dom.rebindListeners(game);
      return Game.start(game);
    };
    Game.finish = function(game) {
      Game.stop(game);
      return Game.dom.showFinishBox(game);
    };
    Game.tick = function(game) {
      Update.game(game, game.tickLen);
      Render.game(game);
      if (game.mode.mode === "time" && game.time > game.mode.time) {
        return Game.finish(game);
      }
    };
    Game.dom = {};
    Game.dom.init = function() {
      var $body, $canvas, $main, $oldBody, ctx;
      $body = $("<body>").attr("id", "krt");
      $main = $("<div class='game'>").appendTo($body);
      $canvas = $("<canvas>").appendTo($main);
      $canvas.css({
        "display": "block",
        "position": "fixed",
        "top": "0px",
        "left": "0px",
        "margin": "0px",
        "padding": "0px"
      });
      ctx = $canvas[0].getContext("2d");
      $oldBody = $("body").detach();
      $("html").append($body);
      return {
        $body: $body,
        $oldBody: $oldBody,
        $main: $main,
        $canvas: $canvas,
        ctx: ctx,
        $pauseBox: void 0
      };
    };
    Game.dom.restore = function(game) {
      game.dom.$body.remove();
      return game.dom.$oldBody.appendTo($("html"));
    };
    Game.dom.resizeCanvas = function(game) {
      game.size.x = window.innerWidth;
      game.size.y = window.innerHeight;
      game.dom.$canvas.attr("width", game.size.x);
      game.dom.$canvas.attr("height", game.size.y);
      return Render.game(game);
    };
    Game.dom.rebindListeners = function(game) {
      if (game.events != null) {
        Game.dom.unbindListeners(game);
      }
      game.events = Game.events(game);
      return $(window).on(game.events);
    };
    Game.dom.unbindListeners = function(game) {
      if (game.events == null) {
        return;
      }
      $(window).off(game.events);
      return game.events = void 0;
    };
    Game.dom.showPauseBox = function(game) {
      if (game.dom.$pauseBox != null) {
        Game.dom.hidePauseBox(game);
      }
      game.dom.$pauseBox = Game.dom.createPauseBox(game);
      return game.dom.$main.append(game.dom.$pauseBox);
    };
    Game.dom.hidePauseBox = function(game) {
      if (game.dom.$pauseBox != null) {
        game.dom.$pauseBox.remove();
      }
      return game.dom.$pauseBox = void 0;
    };
    Game.dom.createPauseBox = function(game) {
      var $box;
      $box = $("<div class='pause-box box'>\n  <div class='results'></div>\n\n  <div class='controls'>\n    <input type='button' name='resume' value='Resume'>\n    <input type='button' name='quit' value='Quit'>\n  </div>\n</div>");
      $box.find("input[name=resume]").click(function() {
        return Game.resume(game);
      });
      $box.find("input[name=quit]").attr("disabled", true).click(function() {
        return Game.deinit(game);
      });
      setTimeout((function() {
        return $box.find("input[name=quit]").attr("disabled", false);
      }), 1500);
      $box.find(".results").append(Game.dom.createResults(game));
      return $box;
    };
    Game.dom.showFinishBox = function(game) {
      Game.dom.hidePauseBox(game);
      if (game.dom.$finishBox == null) {
        game.dom.$finishBox = Game.dom.createFinishBox(game);
        return game.dom.$main.append(game.dom.$finishBox);
      }
    };
    Game.dom.createFinishBox = function(game) {
      var $box;
      $box = $("<div class='finish-box box'>\n  <div class='results'></div>\n\n  <div class='controls'>\n    <input type='button' name='ok' value='Ok'>\n  </div>\n</div>");
      $box.find("input[name=ok]").attr("disabled", true).click(function() {
        return Game.deinit(game);
      });
      setTimeout((function() {
        return $box.find("input[name=ok]").attr("disabled", false);
      }), 1500);
      $box.find(".results").append(Game.dom.createResults(game));
      return $box;
    };
    Game.dom.createResults = function(game) {
      var $table, info;
      $table = $("<table>\n  <caption>results</caption>\n  <thead><tr>\n    <th class='name'>name</th>\n    <th class='minus'>-</th>\n    <th class='plus'>+</th>\n    <th class='equals'>=</th>\n  </tr></thead>\n  <tbody></tbody>\n</table>");
      $table.find("tbody").append((function() {
        var _i, _len, _ref, _results;
        _ref = game.playerInfos;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          info = _ref[_i];
          _results.push($("<tr>").append($("<td class='name'>").text(info.name).css({
            color: info.color
          }), $("<td class='minus'>").text("-" + info.destroyed), $("<td class='plus'>").text("+" + info.hits), $("<td class='equals'>").text("" + (info.hits - info.destroyed)).addClass(info.hits > info.destroyed ? "pos" : "neg")));
        }
        return _results;
      })());
      return $table;
    };
    return Game;
  });

}).call(this);
