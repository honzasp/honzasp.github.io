// Generated by CoffeeScript 1.6.3
(function() {
  define(["map", "tank", "bullet", "particle"], function(Map, Tank, Bullet, Particle) {
    var Window;
    Window = {};
    Window.borderColor = "#aaa";
    Window.draw = function(game, center, dim) {
      var ctx, drawObjects, drawTile, drawTiles, mapToWin, winToMap;
      ctx = game.dom.ctx;
      mapToWin = function(m) {
        return {
          x: dim.scale * (m.x - center.x) + dim.w * 0.5,
          y: dim.scale * (m.y - center.y) + dim.h * 0.5
        };
      };
      winToMap = function(w) {
        return {
          x: center.x + (w.x - dim.w * 0.5) / dim.scale,
          y: center.y + (w.y - dim.h * 0.5) / dim.scale
        };
      };
      drawObjects = function() {
        var i, _i, _j, _k, _ref, _ref1, _ref2;
        ctx.save();
        for (i = _i = 0, _ref = game.tanks.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          Tank.draw(game.tanks[i], ctx);
        }
        for (i = _j = 0, _ref1 = game.bullets.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          if (!game.bullets[i].isDead) {
            Bullet.draw(game.bullets[i], ctx);
          }
        }
        for (i = _k = 0, _ref2 = game.particles.length; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
          if (!game.particles[i].isDead) {
            Particle.draw(game.particles[i], ctx);
          }
        }
        return ctx.restore();
      };
      drawTiles = function() {
        var east, north, south, west, x, y, _i, _j, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        _ref = winToMap({
          x: 0,
          y: 0
        }), west = _ref.x, north = _ref.y;
        _ref1 = winToMap({
          x: dim.w,
          y: dim.h
        }), east = _ref1.x, south = _ref1.y;
        for (x = _i = _ref2 = Math.floor(west), _ref3 = Math.ceil(east); _ref2 <= _ref3 ? _i <= _ref3 : _i >= _ref3; x = _ref2 <= _ref3 ? ++_i : --_i) {
          for (y = _j = _ref4 = Math.floor(north), _ref5 = Math.ceil(south); _ref4 <= _ref5 ? _j <= _ref5 : _j >= _ref5; y = _ref4 <= _ref5 ? ++_j : --_j) {
            drawTile({
              x: x,
              y: y
            });
          }
        }
        return void 0;
      };
      drawTile = function(pos) {
        var _ref;
        ctx.fillStyle = Map.contains(game.map, pos.x, pos.y) ? ((_ref = Map.squares[Map.get(game.map, pos.x, pos.y)]) != null ? _ref.color : void 0) || "#f0f" : Map.voidSquare.color;
        return ctx.fillRect(pos.x, pos.y, 1, 1);
      };
      ctx.save();
      ctx.translate(dim.x, dim.y);
      ctx.strokeStyle = Window.borderColor;
      ctx.strokeRect(0, 0, dim.w, dim.h);
      ctx.beginPath();
      ctx.rect(0, 0, dim.w, dim.h);
      ctx.clip();
      ctx.translate(dim.w * 0.5, dim.h * 0.5);
      ctx.scale(dim.scale, dim.scale);
      ctx.translate(-center.x, -center.y);
      drawTiles();
      drawObjects();
      return ctx.restore();
    };
    return Window;
  });

}).call(this);
