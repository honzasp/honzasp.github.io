// Generated by CoffeeScript 1.6.3
(function() {
  define(["jquery", "game"], function($, Game) {
    var COLORS, KEYS, MAX_PLAYERS;
    COLORS = {
      "red": "#f00",
      "blue": "#0f0",
      "green": "#00f",
      "cyan": "#0ff"
    };
    KEYS = ["forward", "backward", "left", "right", "fire", "change"];
    MAX_PLAYERS = 4;
    return function($root) {
      var DEFAULT_STATE, build, buildFps, buildMap, buildMode, buildPlayer, buildPlayerKey, buildPlayers, buildStart, json, jsonTxt, keyName, save, selectKey, startGame, state;
      DEFAULT_STATE = {
        _version: 2,
        mapWidth: 100,
        mapHeight: 50,
        playerCount: 2,
        fps: 30,
        modes: {
          mode: "time",
          time: 120,
          lives: 10,
          hits: 10
        },
        playerDefs: [
          {
            name: "Oin",
            color: "red",
            keys: {
              forward: 87,
              backward: 83,
              left: 65,
              right: 68,
              fire: 81,
              change: 69
            }
          }, {
            name: "Gloin",
            color: "blue",
            keys: {
              forward: 38,
              backward: 40,
              left: 37,
              right: 39,
              fire: 17,
              change: 16
            }
          }, {
            name: "Bifur",
            color: "green",
            keys: {
              forward: 73,
              backward: 75,
              left: 74,
              right: 76,
              fire: 85,
              change: 79
            }
          }, {
            name: "Bombur",
            color: "cyan",
            keys: {
              forward: 104,
              backward: 101,
              left: 100,
              right: 102,
              fire: 103,
              change: 105
            }
          }
        ]
      };
      if ((typeof localStorage !== "undefined" && localStorage !== null) && (typeof JSON !== "undefined" && JSON !== null)) {
        if (jsonTxt = localStorage.getItem("krt settings")) {
          json = JSON.parse(jsonTxt);
          if (json._version === DEFAULT_STATE._version) {
            state = json;
          }
        }
        save = function() {
          return localStorage.setItem("krt settings", JSON.stringify(state));
        };
      } else {
        save = function() {};
      }
      state || (state = DEFAULT_STATE);
      build = function() {
        return $("<div class='menu' />").append(buildMode()).append(buildMap()).append(buildFps()).append(buildPlayers()).append(buildStart()).appendTo($root);
      };
      buildMode = function() {
        var $mode;
        $mode = $("<fieldset class='mode'>\n  <legend>mode</legend>\n  <p>\n    <label><input type='radio' name='mode' value='time'> time:</label>\n    <input type='number' name='time' value='0' class='mode-depends mode-time'>\n  </p>\n  <p>\n    <label><input type='radio' name='mode' value='lives'> lives:</label>\n    <input type='number' name='lives' value='0' class='mode-depends mode-lives'>\n  </p>\n  <p>\n    <label><input type='radio' name='mode' value='hits'> hits:</label>\n    <input type='number' name='hits' value='0' class='mode-depends mode-hits'>\n  </p>\n</fieldset>");
        $mode.find("input[name=time]").val(state.modes.time).change(function() {
          state.modes.time = $(this).val() * 1;
          return save();
        });
        $mode.find("input[name=lives]").val(state.modes.lives).change(function() {
          state.modes.lives = $(this).val() * 1;
          return save();
        });
        $mode.find("input[name=hits]").val(state.modes.hits).change(function() {
          state.modes.hits = $(this).val() * 1;
          return save();
        });
        $mode.find("input[name=mode]").change(function() {
          state.modes.mode = $mode.find("input[name=mode]:checked").val();
          $mode.trigger("changed-mode.krt");
          return save();
        });
        $mode.on("changed-mode.krt", function() {
          $mode.find("input.mode-depends").attr("disabled", true);
          return $mode.find("input.mode-" + state.modes.mode).removeAttr("disabled");
        });
        $mode.find("input[name=mode][value=" + state.modes.mode + "]").attr("checked", true);
        $mode.trigger("changed-mode.krt");
        return $mode;
      };
      buildMap = function() {
        var $map;
        $map = $("<fieldset class='map'>\n  <legend>map</legend>\n  <p>\n    <label>width: <input type='number' name='map-width' value=''></label>\n  </p>\n  <p>\n    <label>height: <input type='number' name='map-height' value=''></label>\n  </p>\n</fieldset>");
        $map.find("input[name=map-width]").val(state.mapWidth).change(function() {
          state.mapWidth = $(this).val() * 1;
          return save();
        });
        $map.find("input[name=map-height]").val(state.mapHeight).change(function() {
          state.mapHeight = $(this).val() * 1;
          return save();
        });
        return $map;
      };
      buildFps = function() {
        var $fps;
        $fps = $("<fieldset class='fps'>\n  <legend>fps</legend>\n  <p><label>frames per second: <input type='number' name='fps' value=''></label></p>\n</fieldset>");
        $fps.find("input[name=fps]").val(state.fps).change(function() {
          state.fps = $(this).val() * 1;
          return save();
        });
        return $fps;
      };
      buildPlayer = function(idx) {
        var $player, colorName, colorValue, key;
        $player = $("<li class='player-" + idx + "'>\n  <p><label>name: <input type='text' name='name-" + idx + "' value=''></label></p>\n  <p><select name='color-" + idx + "'></select></p>\n  <ul class='keys'>\n  </ul>\n</li>");
        $player.find("input[name|=name]").val(state.playerDefs[idx].name).change(function() {
          state.playerDefs[idx].name = $(this).val();
          return save();
        });
        $player.find("select[name|=color]").append((function() {
          var _results;
          _results = [];
          for (colorName in COLORS) {
            colorValue = COLORS[colorName];
            _results.push($("<option>").text(colorName).attr("value", colorName).attr("selected", colorName === state.playerDefs[idx].color));
          }
          return _results;
        })()).change(function() {
          state.playerDefs[idx].color = $(this).find("option:selected").val();
          return save();
        });
        $player.find(".keys").append((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = KEYS.length; _i < _len; _i++) {
            key = KEYS[_i];
            _results.push(buildPlayerKey(idx, key));
          }
          return _results;
        })());
        return $player;
      };
      buildPlayerKey = function(idx, key) {
        var $li;
        $li = $("<li><label>" + key + ": \n  <input type='button' name='key-" + key + "-" + idx + "' value=''>\n</label></li>");
        $li.find("input[name|=key]").val(keyName(state.playerDefs[idx].keys[key])).click(function() {
          var _this = this;
          return selectKey(function(keycode) {
            state.playerDefs[idx].keys[key] = keycode;
            $(_this).val(keyName(keycode));
            return save();
          });
        });
        return $li;
      };
      buildPlayers = function() {
        var $players, i, _i, _ref;
        $players = $("<fieldset class='players'>\n  <legend>players</legend>\n  <p>\n    <input type='button' name='add-player' value='add player'>\n    <input type='button' name='remove-player' value='remove player'>\n  </p>\n  <ul class='players-list'>\n  </ul>\n</fieldset>");
        $players.find("input[name=add-player]").click(function() {
          if (state.playerCount < MAX_PLAYERS) {
            $players.find(".players-list").append(buildPlayer(state.playerCount));
            state.playerCount += 1;
            $players.trigger("changed-players.krt");
            return save();
          }
        });
        $players.find("input[name=remove-player]").click(function() {
          if (state.playerCount > 0) {
            $players.find(".players-list li:last-child").remove();
            state.playerCount -= 1;
            $players.trigger("changed-players.krt");
            return save();
          }
        });
        $players.on("changed-players.krt", function() {
          $players.find("input[name=add-player]").attr("disabled", state.playerCount >= MAX_PLAYERS);
          return $players.find("input[name=remove-player]").attr("disabled", state.playerCount <= 0);
        });
        for (i = _i = 0, _ref = state.playerCount; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          $players.find(".players-list").append(buildPlayer(i));
        }
        return $players;
      };
      buildStart = function() {
        var $start;
        $start = $("<fieldset class='start'>\n  <p><input type='button' name='start-button' value='start'></p>\n</fieldset>");
        return $start.find("input[name=start-button]").click(function() {
          return startGame();
        });
      };
      keyName = function(keycode) {
        return "key " + keycode;
      };
      selectKey = function(callback) {
        return alert("dummy key select");
      };
      startGame = function() {
        var game, i, settings;
        settings = {
          mapWidth: state.mapWidth,
          mapHeight: state.mapHeight,
          startLives: state.modes.lives,
          fps: state.fps,
          playerDefs: (function() {
            var _i, _ref, _results;
            _results = [];
            for (i = _i = 0, _ref = state.playerCount; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              _results.push({
                keys: $.extend({}, state.playerDefs[i].keys)
              });
            }
            return _results;
          })(),
          mode: (function() {
            switch (state.modes.mode) {
              case "time":
                return {
                  mode: "time",
                  time: state.modes.time
                };
              case "lives":
                return {
                  mode: "lives",
                  lives: state.modes.lives
                };
              case "hits":
                return {
                  mode: "hits",
                  hits: state.modes.hits
                };
            }
          })()
        };
        game = Game.init(settings, function() {});
        return Game.start(game);
      };
      return build();
    };
  });

}).call(this);
