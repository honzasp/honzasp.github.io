// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  define(["particle"], function(Particle) {
    var Boom;
    Boom = {};
    Boom.PARTICLE_OPACITY = 0.6;
    Boom.boom = function(_arg) {
      var COLOR, COUNT, RADIUS, SPEED, TIME;
      COUNT = _arg.count, SPEED = _arg.speed, TIME = _arg.time, RADIUS = _arg.radius, COLOR = _arg.color;
      return function(game, pos) {
        var angle, i, radius, speed, time, velX, velY, _i;
        for (i = _i = 0; 0 <= COUNT ? _i < COUNT : _i > COUNT; i = 0 <= COUNT ? ++_i : --_i) {
          angle = 2 * Math.PI * Math.random();
          speed = 0.5 * SPEED + Math.random() * SPEED;
          time = 0.5 * TIME + Math.random() * TIME;
          radius = 0.5 * RADIUS + Math.random() * RADIUS;
          velX = Math.sin(angle) * speed;
          velY = Math.cos(angle) * speed;
          game.particles.push(new Boom.Particle({
            x: pos.x,
            y: pos.y
          }, {
            x: velX,
            y: velY
          }, time, radius, COLOR));
        }
        return void 0;
      };
    };
    Boom.Particle = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      Particle.call.apply(Particle, [this].concat(__slice.call(args)));
      this.opacity = Boom.PARTICLE_OPACITY;
      return this.opacityVel = this.opacity / this.time;
    };
    Boom.Particle.prototype.move = function(t) {
      Particle.prototype.move.call(this, t);
      return this.opacity -= this.opacityVel * t;
    };
    Boom.Particle.prototype.draw = function(ctx) {
      ctx.save();
      ctx.globalAlpha = this.opacity;
      Particle.prototype.draw.call(this, ctx);
      return ctx.restore();
    };
    return Boom;
  });

}).call(this);
