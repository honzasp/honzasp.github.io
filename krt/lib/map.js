// Generated by CoffeeScript 1.6.3
(function() {
  define([], function() {
    var Map, i, t, _i, _j, _ref, _ref1;
    Map = {};
    Map.init = function(width, height) {
      var ary, i, _i, _ref;
      if (typeof Uint8Array !== "undefined" && Uint8Array !== null) {
        ary = new Uint8Array(width * height);
      } else {
        ary = new Array(width * height);
        for (i = _i = 0, _ref = width * height; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          ary[i] = Map.EMPTY;
        }
      }
      return {
        ary: ary,
        width: width,
        height: height,
        bases: []
      };
    };
    Map.get = function(map, x, y) {
      if (!Map.contains(map, x, y)) {
        throw new Error("position out of map");
      }
      return map.ary[x * map.height + y];
    };
    Map.set = function(map, x, y, val) {
      if (!Map.contains(map, x, y)) {
        throw new Error("position out of map");
      }
      return map.ary[x * map.height + y] = val;
    };
    Map.setOrNothing = function(map, x, y, val) {
      if (Map.contains(map, x, y)) {
        return map.ary[x * map.height + y] = val;
      }
    };
    Map.contains = function(map, x, y) {
      if (!(x === Math.floor(x) && y === Math.floor(y))) {
        throw new Error("only integer coordinates allowed");
      }
      return x >= 0 && x < map.width && y >= 0 && y < map.height;
    };
    Map.squares = new Array(256);
    Map.squares[Map.EMPTY = 0] = {
      color: "#333333"
    };
    Map.squares[Map.CONCRETE = 120] = {
      color: "#a3a3a3",
      toughness: 0.998,
      shotSound: "hit_concrete"
    };
    Map.squares[Map.STEEL = 130] = {
      color: "#6f7989",
      toughness: 0.995,
      shotSound: "hit_metal"
    };
    Map.squares[Map.TITANIUM = 131] = {
      color: "#6287b2",
      toughness: 0.999,
      shotSound: "hit_metal"
    };
    Map.squares[Map.GOLD = 132] = {
      color: "#dfbe23",
      toughness: 0.3,
      energy: 300,
      shotSound: "hit_metal"
    };
    Map.squares[Map.LEAD = 133] = {
      color: "#5b7380",
      toughness: 0.35,
      mass: 50,
      shotSound: "hit_metal"
    };
    Map.squares[Map.VOID = 255] = {
      color: "#000000"
    };
    Map.ROCK_STATS = [
      {
        toughness: 0.4,
        energy: 80,
        prob: 0.5,
        shotSound: "hit_rock"
      }, {
        toughness: 0.5,
        mass: 30,
        prob: 0.4,
        shotSound: "hit_rock"
      }, {
        toughness: 0.6,
        energy: 90,
        prob: 0.4,
        shotSound: "hit_rock"
      }, {
        toughness: 0.5,
        energy: 60,
        prob: 0.3,
        shotSound: "hit_rock"
      }, {
        toughness: 0.5,
        energy: 100,
        prob: 0.3,
        shotSound: "hit_rock"
      }, {
        toughness: 0.4,
        mass: 10,
        prob: 0.6,
        shotSound: "hit_rock"
      }
    ];
    Map.ROCK_COLORS = [["#a39c89", "#a79f8c", "#aaa18b", "#aea287", "#a79b7e", "#a69b83"], ["#a39e89", "#a7a189", "#a09a80", "#999584", "#a09c88", "#a5a08a"], ["#958476", "#8f7d6f", "#988473", "#9d8878", "#a68f7d", "#a79281"], ["#aa9c74", "#a89a72", "#ac9e76", "#ae9e75", "#a99b76", "#aea07b"], ["#b4b1a2", "#b8b5a4", "#bdbaa8", "#bdb9a5", "#bab69f", "#b4b19a"], ["#b6b19d", "#bab5a2", "#bfbaa5", "#bfbaa3", "#c3bea9", "#bdb8a3"]];
    Map.ROCK_FAMILY_COUNT = 6;
    Map.ROCK_FAMILY_SIZE = 6;
    Map.rockId = function(type, i) {
      return 10 + 10 * type + i;
    };
    for (t = _i = 0, _ref = Map.ROCK_FAMILY_COUNT; _i < _ref; t = _i += 1) {
      for (i = _j = 0, _ref1 = Map.ROCK_FAMILY_SIZE; _j < _ref1; i = _j += 1) {
        Map.squares[Map["ROCK_" + t + "_" + i] = Map.rockId(t, i)] = {
          color: Map.ROCK_COLORS[t][i],
          toughness: Map.ROCK_STATS[i].toughness,
          energy: Map.ROCK_STATS[i].energy,
          mass: Map.ROCK_STATS[i].mass,
          prob: Map.ROCK_STATS[i].prob,
          shotSound: Map.ROCK_STATS[i].shotSound
        };
      }
    }
    return Map;
  });

}).call(this);
