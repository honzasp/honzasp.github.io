// Generated by CoffeeScript 1.6.3
(function() {
  define(["exports", "jquery", "game", "keycodes", "menu_players", "menu_config", "menu_credits", "menu_loading"], function(exports, $, Game, Keycodes, MenuPlayers, MenuConfig, MenuCredits, MenuLoading) {
    var Menu;
    Menu = exports;
    Menu.Players = MenuPlayers;
    Menu.Config = MenuConfig;
    Menu.Credits = MenuCredits;
    Menu.Loading = MenuLoading;
    Menu.COLORS = {
      "yellow": "#b38a0a",
      "orange": "#c7501e",
      "red": "#d73936",
      "magenta": "#cf3c83",
      "violet": "#6f73c1",
      "blue": "#2d8cce",
      "cyan": "#31a098",
      "green": "#86990a"
    };
    Menu.KEYS = ["forward", "backward", "left", "right", "fire", "change"];
    Menu.MAX_PLAYERS = 4;
    Menu.STATE_VERSION = 10;
    Menu.DEFAULT_STATE = function() {
      return {
        _version: Menu.STATE_VERSION,
        mapWidth: 200,
        mapHeight: 200,
        mapNoisiness: 40,
        mapEmptiness: 50,
        mapSeed: "",
        playerCount: 2,
        fps: 30,
        hud: true,
        rotateViewport: false,
        nameTags: true,
        audioEnabled: false,
        soundsVolume: 100,
        modes: {
          mode: "time",
          time: 120,
          lives: 10,
          hits: 10
        },
        playerDefs: [
          {
            name: "Oin",
            color: "red",
            keys: {
              forward: 87,
              backward: 83,
              left: 65,
              right: 68,
              fire: 81,
              change: 69
            }
          }, {
            name: "Gloin",
            color: "blue",
            keys: {
              forward: 38,
              backward: 40,
              left: 37,
              right: 39,
              fire: 17,
              change: 16
            }
          }, {
            name: "Bifur",
            color: "green",
            keys: {
              forward: 73,
              backward: 75,
              left: 74,
              right: 76,
              fire: 85,
              change: 79
            }
          }, {
            name: "Bombur",
            color: "cyan",
            keys: {
              forward: 104,
              backward: 101,
              left: 100,
              right: 102,
              fire: 103,
              change: 105
            }
          }
        ]
      };
    };
    Menu.USE_LOCAL_STORAGE = (window.localStorage != null) && (window.JSON != null);
    Menu.init = function($root) {
      var menu;
      menu = {
        $root: $root,
        $main: void 0,
        game: void 0,
        state: Menu.init.state()
      };
      Menu.build(menu);
      return menu;
    };
    if (Menu.USE_LOCAL_STORAGE) {
      Menu.init.state = function() {
        var json, jsonTxt;
        if (jsonTxt = localStorage.getItem("krt settings")) {
          json = JSON.parse(jsonTxt);
          if (json._version === Menu.STATE_VERSION) {
            return json;
          }
        }
        return Menu.DEFAULT_STATE();
      };
      Menu.save = function(menu) {
        return localStorage.setItem("krt settings", JSON.stringify(menu.state));
      };
    } else {
      Menu.init.state = function() {
        return Menu.DEFAULT_STATE();
      };
      Menu.save = function(menu) {};
    }
    Menu.build = function(menu) {
      if (menu.$main != null) {
        menu.$main.remove();
      }
      menu.$main = $("<div class='menu'>").append([Menu.Config.buildConfig(menu), Menu.Players.buildPlayers(menu), Menu.buildStart(menu)]);
      return menu.$main.appendTo(menu.$root);
    };
    Menu.resetState = function(menu) {
      menu.state = Menu.DEFAULT_STATE();
      Menu.save(menu);
      return Menu.build(menu);
    };
    Menu.valInt = function(elem, min, max) {
      var val;
      if (min == null) {
        min = void 0;
      }
      if (max == null) {
        max = void 0;
      }
      val = parseInt($(elem).val(), 10);
      if ((min != null) && val < min) {
        return min;
      }
      if ((max != null) && val > max) {
        return max;
      }
      return val;
    };
    Menu.valFloat = function(elem, min, max) {
      var val;
      if (min == null) {
        min = void 0;
      }
      if (max == null) {
        max = void 0;
      }
      val = parseFloat($(elem).val());
      if ((min != null) && val < min) {
        return min;
      }
      if ((max != null) && val > max) {
        return max;
      }
      return val;
    };
    Menu.keyName = function(keycode) {
      return Keycodes[keycode] || ("key " + keycode);
    };
    Menu.selectKey = function(menu, callback) {
      var $dialog;
      $dialog = $("<div class='dialog'>\n  <div class='select-key'>\n    <p>Press key</p>\n    <p><input type='button' name='select-key-cancel' value='Cancel'></p>\n  </div>\n</div>");
      $(document).one("keydown", function(evt) {
        $dialog.trigger("dismiss-select-key.krt");
        callback(evt.which);
        return evt.preventDefault();
      });
      $dialog.find("input[name=select-key-cancel]").click(function() {
        return $dialog.trigger("dismiss-select-key.krt");
      });
      $dialog.on("dismiss-select-key.krt", function() {
        return $dialog.remove();
      });
      return $dialog.appendTo(menu.$main);
    };
    Menu.buildStart = function(menu) {
      var $start;
      $start = $("<fieldset class='start'>\n  <input type='button' name='start-button' value='start'>\n  <input type='button' name='reset-button' value='reset settings'>\n  <input type='button' name='credits-button' value='credits'>\n</fieldset>");
      $start.find("input[name=start-button]").click(function() {
        return Menu.startGame(menu);
      });
      $start.find("input[name=reset-button]").click(function() {
        return Menu.resetState(menu);
      });
      $start.find("input[name=credits-button]").click(function() {
        return Menu.Credits.showCredits(menu);
      });
      return $start;
    };
    Menu.startGame = function(menu) {
      var i, loading, settings, state;
      if (menu.game != null) {
        return;
      }
      state = menu.state;
      settings = {
        mapWidth: state.mapWidth,
        mapHeight: state.mapHeight,
        mapAmp: state.mapNoisiness / 100,
        mapCaveLimit: Math.pow((state.mapEmptiness - 50) / 50, 3),
        mapSeed: state.mapSeed || (new Date()).toString(),
        startLives: state.modes.lives,
        fps: state.fps,
        useHud: state.hud,
        useNameTags: state.nameTags,
        rotateViewport: state.rotateViewport,
        enableAudio: state.audioEnabled,
        soundsGain: state.soundsVolume / 100,
        playerDefs: (function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = state.playerCount; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push({
              name: state.playerDefs[i].name,
              color: Menu.COLORS[state.playerDefs[i].color],
              keys: $.extend({}, state.playerDefs[i].keys)
            });
          }
          return _results;
        })(),
        mode: (function() {
          switch (state.modes.mode) {
            case "time":
              return {
                mode: "time",
                time: state.modes.time
              };
            case "lives":
              return {
                mode: "lives",
                lives: state.modes.lives
              };
            case "hits":
              return {
                mode: "hits",
                hits: state.modes.hits
              };
          }
        })()
      };
      menu.$main.hide();
      loading = Menu.Loading.init(menu.$root);
      return Game.init(settings, (function(game) {
        menu.game = game;
        Menu.Loading.deinit(loading);
        return Game.start(game);
      }), (function() {
        menu.game = void 0;
        return menu.$main.show();
      }));
    };
    return Menu;
  });

}).call(this);
