// Generated by CoffeeScript 1.6.3
(function() {
  define(["jquery", "game", "keycodes"], function($, Game, Keycodes) {
    var Menu;
    Menu = {};
    Menu.COLORS = {
      "yellow": "#b38a0a",
      "orange": "#c7501e",
      "red": "#d73936",
      "magenta": "#cf3c83",
      "violet": "#6f73c1",
      "blue": "#2d8cce",
      "cyan": "#31a098",
      "green": "#86990a"
    };
    Menu.KEYS = ["forward", "backward", "left", "right", "fire", "change"];
    Menu.MAX_PLAYERS = 4;
    Menu.STATE_VERSION = 9;
    Menu.DEFAULT_STATE = function() {
      return {
        _version: Menu.STATE_VERSION,
        mapWidth: 200,
        mapHeight: 200,
        mapNoisiness: 40,
        mapEmptiness: 50,
        mapSeed: "",
        playerCount: 2,
        fps: 30,
        hud: true,
        nameTags: true,
        audioEnabled: false,
        soundsVolume: 100,
        modes: {
          mode: "time",
          time: 120,
          lives: 10,
          hits: 10
        },
        playerDefs: [
          {
            name: "Oin",
            color: "red",
            keys: {
              forward: 87,
              backward: 83,
              left: 65,
              right: 68,
              fire: 81,
              change: 69
            }
          }, {
            name: "Gloin",
            color: "blue",
            keys: {
              forward: 38,
              backward: 40,
              left: 37,
              right: 39,
              fire: 17,
              change: 16
            }
          }, {
            name: "Bifur",
            color: "green",
            keys: {
              forward: 73,
              backward: 75,
              left: 74,
              right: 76,
              fire: 85,
              change: 79
            }
          }, {
            name: "Bombur",
            color: "cyan",
            keys: {
              forward: 104,
              backward: 101,
              left: 100,
              right: 102,
              fire: 103,
              change: 105
            }
          }
        ]
      };
    };
    Menu.USE_LOCAL_STORAGE = (window.localStorage != null) && (window.JSON != null);
    Menu.init = function($root) {
      var menu;
      menu = {
        $root: $root,
        $main: void 0,
        game: void 0,
        state: Menu.init.state()
      };
      Menu.build(menu);
      return menu;
    };
    if (Menu.USE_LOCAL_STORAGE) {
      Menu.init.state = function() {
        var json, jsonTxt;
        if (jsonTxt = localStorage.getItem("krt settings")) {
          json = JSON.parse(jsonTxt);
          if (json._version === Menu.STATE_VERSION) {
            return json;
          }
        }
        return Menu.DEFAULT_STATE();
      };
      Menu.save = function(menu) {
        return localStorage.setItem("krt settings", JSON.stringify(menu.state));
      };
    } else {
      Menu.init.state = function() {
        return Menu.DEFAULT_STATE();
      };
      Menu.save = function(menu) {};
    }
    Menu.build = function(menu) {
      if (menu.$main != null) {
        menu.$main.remove();
      }
      menu.$main = $("<div class='menu'>").append([Menu.buildMode(menu), Menu.buildMap(menu), Menu.buildGfx(menu), Menu.buildAudio(menu), Menu.buildPlayers(menu), Menu.buildStart(menu)]);
      menu.$main.on("game-loading.krt", function() {
        return menu.$main.find("input[name=start-button]").attr("disabled", true);
      });
      menu.$main.on("game-finished.krt", function() {
        return menu.$main.find("input[name=start-button]").attr("disabled", false);
      });
      return menu.$main.appendTo(menu.$root);
    };
    Menu.resetState = function(menu) {
      menu.state = Menu.DEFAULT_STATE();
      Menu.save(menu);
      return Menu.build(menu);
    };
    Menu.valInt = function(elem, min, max) {
      var val;
      if (min == null) {
        min = void 0;
      }
      if (max == null) {
        max = void 0;
      }
      val = parseInt($(elem).val(), 10);
      if ((min != null) && val < min) {
        return min;
      }
      if ((max != null) && val > max) {
        return max;
      }
      return val;
    };
    Menu.valFloat = function(elem, min, max) {
      var val;
      if (min == null) {
        min = void 0;
      }
      if (max == null) {
        max = void 0;
      }
      val = parseFloat($(elem).val());
      if ((min != null) && val < min) {
        return min;
      }
      if ((max != null) && val > max) {
        return max;
      }
      return val;
    };
    Menu.buildMode = function(menu) {
      var $mode;
      $mode = $("<fieldset class='mode'>\n  <legend>mode</legend>\n  <p>\n    <label><input type='radio' name='mode' value='time'> <span>time:</span></label>\n    <input type='number' name='time' min='1' step='1' class='mode-depends mode-time'>\n  </p>\n  <p>\n    <label><input type='radio' name='mode' value='lives'> <span>lives:</span></label>\n    <input type='number' name='lives' min='1' step='1' class='mode-depends mode-lives'>\n  </p>\n  <p>\n    <label><input type='radio' name='mode' value='hits'> <span>hits:</span></label>\n    <input type='number' name='hits' min='1' step='1' class='mode-depends mode-hits'>\n  </p>\n</fieldset>");
      $mode.find("input[name=time]").val(menu.state.modes.time).change(function() {
        menu.state.modes.time = valInt(this, 1);
        return Menu.save(menu);
      });
      $mode.find("input[name=lives]").val(menu.state.modes.lives).change(function() {
        menu.state.modes.lives = valInt(this, 1);
        return Menu.save(menu);
      });
      $mode.find("input[name=hits]").val(menu.state.modes.hits).change(function() {
        menu.state.modes.hits = valInt(this, 1);
        return Menu.save(menu);
      });
      $mode.find("input[name=mode]").change(function() {
        menu.state.modes.mode = $mode.find("input[name=mode]:checked").val();
        $mode.trigger("changed-mode.krt");
        return Menu.save(menu);
      });
      $mode.on("changed-mode.krt", function() {
        $mode.find("input.mode-depends").attr("disabled", true);
        return $mode.find("input.mode-" + menu.state.modes.mode).removeAttr("disabled");
      });
      $mode.find("input[name=mode][value=" + menu.state.modes.mode + "]").attr("checked", true);
      $mode.trigger("changed-mode.krt");
      return $mode;
    };
    Menu.buildMap = function(menu) {
      var $map;
      $map = $("<fieldset class='map'>\n  <legend>map</legend>\n  <p>\n    <label><span>width:</span> \n    <input type='number' name='map-width' min='50' step='1'></label>\n  </p>\n  <p>\n    <label><span>height:</span> \n    <input type='number' name='map-height' min='50' step='1'></label>\n  </p>\n  <p>\n    <label><span>noisiness:</span>\n    <input type='number' name='map-noisiness' min='1' max='99'></label>\n  </p>\n  <p>\n    <label><span>emptiness:</span> \n    <input type='number' name='map-emptiness' min='1' max='99'></label>\n  </p>\n  <p>\n    <label><span>seed:</span>\n    <input type='text' name='map-seed'></label>\n  </p>\n</fieldset>");
      $map.find("input[name=map-width]").val(menu.state.mapWidth).change(function() {
        menu.state.mapWidth = valInt(this, 50);
        return Menu.save(menu);
      });
      $map.find("input[name=map-height]").val(menu.state.mapHeight).change(function() {
        menu.state.mapHeight = valInt(this, 50);
        return Menu.save(menu);
      });
      $map.find("input[name=map-noisiness]").val(menu.state.mapNoisiness).change(function() {
        menu.state.mapNoisiness = valFloat(this, 1, 99);
        return Menu.save(menu);
      });
      $map.find("input[name=map-emptiness]").val(menu.state.mapEmptiness).change(function() {
        menu.state.mapEmptiness = valFloat(this, 1, 99);
        return Menu.save(menu);
      });
      $map.find("input[name=map-seed]").val(menu.state.mapSeed).change(function() {
        menu.state.mapSeed = $(this).val();
        return Menu.save(menu);
      });
      return $map;
    };
    Menu.buildGfx = function(menu) {
      var $gfx;
      $gfx = $("<fieldset class='gfx'>\n  <legend>gfx</legend>\n  <p>\n    <label><span>frames per second:</span> \n    <input type='number' name='fps' value=''></label>\n  </p>\n  <p>\n    <label><span>head-up display:</span>\n    <input type='checkbox' name='hud'></label>\n  </p>\n  <p>\n    <label><span>name tags:</span>\n    <input type='checkbox' name='name-tags'></label>\n  </p>\n</fieldset>");
      $gfx.find("input[name=fps]").val(menu.state.fps).change(function() {
        menu.state.fps = valFloat(this, 1, 200);
        return Menu.save(menu);
      });
      $gfx.find("input[name=hud]").attr("checked", menu.state.hud).change(function() {
        menu.state.hud = $(this).is(":checked");
        return Menu.save(menu);
      });
      $gfx.find("input[name=name-tags]").attr("checked", menu.state.nameTags).change(function() {
        menu.state.nameTags = $(this).is(":checked");
        return Menu.save(menu);
      });
      return $gfx;
    };
    Menu.buildAudio = function(menu) {
      var $audio;
      $audio = $("<fieldset class='audio'>\n  <legend>audio</legend>\n  <p>\n    <label><span>audio enabled:</span>\n    <input type='checkbox' name='audio-enabled'></label>\n  </p>\n  <p>\n    <label><span>sounds volume:</span>\n    <input type='number' name='sounds-volume'></label>\n  </p>\n</fieldset>");
      $audio.find("input[name=audio-enabled]").attr("checked", menu.state.audioEnabled).change(function() {
        menu.state.audioEnabled = $(this).is(":checked");
        return Menu.save(menu);
      });
      $audio.find("input[name=sounds-volume]").val(menu.state.soundsVolume).change(function() {
        menu.state.soundsVolume = valFloat(this, 0, 100);
        return Menu.save(menu);
      });
      return $audio;
    };
    Menu.buildPlayer = function(menu, idx) {
      var $player, colorName, key;
      $player = $("<li class='player-" + idx + "'>\n  <p><label><span>name:</span> <input type='text' name='name-" + idx + "' value=''></label></p>\n  <p><label><span>color:</span> <select name='color-" + idx + "'></select></label></p>\n  <ul class='keys'>\n  </ul>\n</li>");
      $player.find("input[name|=name]").val(menu.state.playerDefs[idx].name).change(function() {
        menu.state.playerDefs[idx].name = $(this).val();
        return Menu.save(menu);
      });
      $player.find("select[name|=color]").append((function() {
        var _results;
        _results = [];
        for (colorName in Menu.COLORS) {
          _results.push($("<option>").text(colorName).attr({
            value: colorName,
            selected: colorName === menu.state.playerDefs[idx].color
          }).css({
            color: Menu.COLORS[colorName]
          }));
        }
        return _results;
      })()).change(function() {
        return $player.trigger("changed-color.krt");
      });
      $player.find(".keys").append((function() {
        var _i, _len, _ref, _results;
        _ref = Menu.KEYS;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          _results.push(Menu.buildPlayerKey(menu, idx, key));
        }
        return _results;
      })());
      $player.on("changed-color.krt", function() {
        colorName = $(this).find("option:selected").val();
        $player.css({
          borderLeftColor: Menu.COLORS[colorName]
        });
        menu.state.playerDefs[idx].color = colorName;
        return Menu.save(menu);
      });
      return $player.trigger("changed-color");
    };
    Menu.buildPlayerKey = function(menu, idx, key) {
      var $li;
      $li = $("<li><label><span>" + key + "</span>\n  <input type='button' name='key-" + key + "-" + idx + "' value=''>\n</label></li>");
      $li.find("input[name|=key]").val(Menu.keyName(menu.state.playerDefs[idx].keys[key])).click(function() {
        var _this = this;
        return Menu.selectKey(menu, function(keycode) {
          menu.state.playerDefs[idx].keys[key] = keycode;
          $(_this).val(Menu.keyName(keycode));
          return Menu.save(menu);
        });
      });
      return $li;
    };
    Menu.buildPlayers = function(menu) {
      var $players, i, _i, _ref;
      $players = $("<fieldset class='players'>\n  <legend>players</legend>\n  <p>\n    <input type='button' name='add-player' value='add player'>\n    <input type='button' name='remove-player' value='remove player'>\n  </p>\n  <ul class='players-list'>\n  </ul>\n</fieldset>");
      $players.find("input[name=add-player]").click(function() {
        if (menu.state.playerCount < Menu.MAX_PLAYERS) {
          $players.find(".players-list").append(Menu.buildPlayer(menu, menu.state.playerCount));
          menu.state.playerCount += 1;
          $players.trigger("changed-players.krt");
          return Menu.save(menu);
        }
      });
      $players.find("input[name=remove-player]").click(function() {
        if (menu.state.playerCount > 0) {
          $players.find(".players-list>li:last-child").remove();
          menu.state.playerCount -= 1;
          $players.trigger("changed-players.krt");
          return Menu.save(menu);
        }
      });
      $players.on("changed-players.krt", function() {
        $players.find("input[name=add-player]").attr("disabled", menu.state.playerCount >= Menu.MAX_PLAYERS);
        return $players.find("input[name=remove-player]").attr("disabled", menu.state.playerCount <= 1);
      });
      for (i = _i = 0, _ref = menu.state.playerCount; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        $players.find(".players-list").append(Menu.buildPlayer(menu, i));
      }
      $players.trigger("changed-players.krt");
      return $players;
    };
    Menu.buildStart = function(menu) {
      var $start;
      $start = $("<fieldset class='start'>\n  <input type='button' name='start-button' value='start'>\n  <input type='button' name='reset-button' value='reset settings'>\n</fieldset>");
      $start.find("input[name=start-button]").click(function() {
        return Menu.startGame(menu);
      });
      $start.find("input[name=reset-button]").click(function() {
        return Menu.resetState(menu);
      });
      return $start;
    };
    Menu.keyName = function(keycode) {
      return Keycodes[keycode] || ("key " + keycode);
    };
    Menu.selectKey = function(menu, callback) {
      var $dialog;
      $dialog = $("<div class='dialog'>\n  <div class='select-key'>\n    <p>Press key</p>\n    <p><input type='button' name='select-key-cancel' value='Cancel'></p>\n  </div>\n</div>");
      $(document).one("keydown", function(evt) {
        $dialog.trigger("dismiss-select-key.krt");
        callback(evt.which);
        return evt.preventDefault();
      });
      $dialog.find("input[name=select-key-cancel]").click(function() {
        return $dialog.trigger("dismiss-select-key.krt");
      });
      $dialog.on("dismiss-select-key.krt", function() {
        return $dialog.remove();
      });
      return $dialog.appendTo(menu.$main);
    };
    Menu.startGame = function(menu) {
      var i, settings, state;
      if (menu.game != null) {
        return;
      }
      state = menu.state;
      settings = {
        mapWidth: state.mapWidth,
        mapHeight: state.mapHeight,
        mapAmp: state.mapNoisiness / 100,
        mapCaveLimit: Math.pow((state.mapEmptiness - 50) / 50, 3),
        mapSeed: state.mapSeed || (new Date()).toString(),
        startLives: state.modes.lives,
        fps: state.fps,
        useHud: state.hud,
        useNameTags: state.nameTags,
        enableAudio: state.audioEnabled,
        soundsGain: state.soundsVolume / 100,
        playerDefs: (function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = state.playerCount; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push({
              name: state.playerDefs[i].name,
              color: COLORS[state.playerDefs[i].color],
              keys: $.extend({}, state.playerDefs[i].keys)
            });
          }
          return _results;
        })(),
        mode: (function() {
          switch (state.modes.mode) {
            case "time":
              return {
                mode: "time",
                time: state.modes.time
              };
            case "lives":
              return {
                mode: "lives",
                lives: state.modes.lives
              };
            case "hits":
              return {
                mode: "hits",
                hits: state.modes.hits
              };
          }
        })()
      };
      $menu.trigger("game-loading.krt");
      return Game.init(settings, (function(game) {
        menu.game = game;
        return Game.start(game);
      }), (function() {
        menu.game = void 0;
        return $menu.trigger("game-finished.krt");
      }));
    };
    return Menu;
  });

}).call(this);
