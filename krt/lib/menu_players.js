// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  define(["jquery", "menu"], function($, Menu) {
    var Players;
    Players = {};
    Players.buildPlayer = function(menu, idx) {
      var $player, colorName, key;
      $player = $("<li class='player-" + idx + "'>\n  <p><label><span>name:</span> <input type='text' name='name-" + idx + "' value=''></label></p>\n  <p><label><span>color:</span> <select name='color-" + idx + "'></select></label></p>\n  <ul class='keys'>\n  </ul>\n</li>");
      $player.find("input[name|=name]").val(menu.state.playerDefs[idx].name).change(function() {
        menu.state.playerDefs[idx].name = $(this).val();
        return Menu.save(menu);
      });
      $player.find("select[name|=color]").append((function() {
        var _results;
        _results = [];
        for (colorName in Menu.COLORS) {
          _results.push($("<option>").text(colorName).attr({
            value: colorName,
            selected: colorName === menu.state.playerDefs[idx].color
          }).css({
            color: Menu.COLORS[colorName]
          }));
        }
        return _results;
      })()).change(function() {
        return $player.trigger("changed-color.krt");
      });
      $player.find(".keys").append((function() {
        var _i, _len, _ref, _results;
        _ref = Menu.KEYS;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          _results.push(Players.buildPlayerKey(menu, idx, key));
        }
        return _results;
      })());
      $player.on("changed-color.krt", function() {
        colorName = $(this).find("option:selected").val();
        $player.css({
          borderLeftColor: Menu.COLORS[colorName]
        });
        menu.state.playerDefs[idx].color = colorName;
        return Menu.save(menu);
      });
      return $player.trigger("changed-color");
    };
    Players.buildPlayerKey = function(menu, idx, key) {
      var $li;
      $li = $("<li><label><span>" + key + "</span>\n  <input type='button' name='key-" + key + "-" + idx + "' value=''>\n</label></li>");
      $li.find("input[name|=key]").val(Menu.keyName(menu.state.playerDefs[idx].keys[key])).click(function() {
        var _this = this;
        return Menu.selectKey(menu, function(keycode) {
          menu.state.playerDefs[idx].keys[key] = keycode;
          $(_this).val(Menu.keyName(keycode));
          return Menu.save(menu);
        });
      });
      return $li;
    };
    Players.buildPlayers = function(menu) {
      var $players, i, _i, _ref;
      $players = $("<fieldset class='players'>\n  <legend>players</legend>\n  <p class='controls'>\n    <input type='button' name='add-player' value='add player'>\n    <input type='button' name='remove-player' value='remove player'>\n  </p>\n  <ul class='players-list'>\n  </ul>\n</fieldset>");
      $players.find("input[name=add-player]").click(function() {
        if (menu.state.playerCount < Menu.MAX_PLAYERS) {
          $players.find(".players-list").append(Players.buildPlayer(menu, menu.state.playerCount));
          menu.state.playerCount += 1;
          $players.trigger("changed-players.krt");
          return Menu.save(menu);
        }
      });
      $players.find("input[name=remove-player]").click(function() {
        if (menu.state.playerCount > 0) {
          $players.find(".players-list>li:last-child").remove();
          menu.state.playerCount -= 1;
          $players.trigger("changed-players.krt");
          return Menu.save(menu);
        }
      });
      $players.on("changed-players.krt", function() {
        $players.find("input[name=add-player]").attr("disabled", menu.state.playerCount >= Menu.MAX_PLAYERS);
        return $players.find("input[name=remove-player]").attr("disabled", menu.state.playerCount <= 1);
      });
      for (i = _i = 0, _ref = menu.state.playerCount; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        $players.find(".players-list").append(Players.buildPlayer(menu, i));
      }
      $players.trigger("changed-players.krt");
      return $players;
    };
    return Players;
  });

}).call(this);
