// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var Game;
    Game = {
      running: false,
      screen: $("#screen"),
      infoBox: $("#info-box"),
      ballCanvas: $("#ball"),
      resultBox: $("#result-box"),
      ballColor: "#000",
      backgroundColor: "#57c889",
      start: function(_arg) {
        var button, size, time,
          _this = this;
        time = _arg.time, size = _arg.size, button = _arg.button;
        if (!this.running) {
          this.time = time;
          this.ballSize = size;
          this.button = button;
          this.prepareBall();
          this.prepareScreen();
          this.hitCount = 0;
          this.missCount = 0;
          this.placeBall();
          this.updateInfo();
          setTimeout((function() {
            return _this.timeOut();
          }), this.time * 1000);
          return this.running = true;
        }
      },
      prepareBall: function() {
        var ctx;
        this.ballCanvas.attr("width", this.ballSize);
        this.ballCanvas.attr("height", this.ballSize);
        this.ballCanvas.css("position", "absolute");
        ctx = this.ballCanvas[0].getContext("2d");
        ctx.beginPath();
        ctx.arc(this.ballSize / 2, this.ballSize / 2, this.ballSize / 2, 0, 2 * Math.PI);
        ctx.fillStyle = this.ballColor;
        ctx.fill();
        return this.ballCanvas.show();
      },
      prepareScreen: function() {
        this.screen.css({
          "background-color": this.backgroundColor
        });
        this.screen.show();
        this.resizeScreen();
        return $("body div[style*='!important']").remove();
      },
      resizeScreen: function() {
        this.screenWidth = $(window).width();
        this.screenHeight = $(window).height();
        return this.screen.css({
          "width": "" + this.screenWidth + "px",
          "height": "" + this.screenHeight + "px"
        });
      },
      updateInfo: function() {
        $(".hits", this.infoBox).text("" + this.hitCount);
        return $(".miss", this.infoBox).text("" + this.missCount);
      },
      click: function(x, y, button) {
        var distSq, relX, relY;
        if (this.running) {
          relX = x - this.ballX;
          relY = y - this.ballY;
          distSq = relX * relX + relY * relY;
          if (distSq <= (this.ballSize * this.ballSize) / 4 && this.button === button) {
            this.hitCount += 1;
          } else {
            this.missCount += 1;
            this.showMiss();
          }
          this.placeBall();
          this.updateInfo();
          return true;
        } else {
          return false;
        }
      },
      showMiss: function() {
        var _this = this;
        this.screen.css("background-color", "#555");
        return setTimeout((function() {
          return _this.screen.css("background-color", _this.backgroundColor);
        }), 100);
      },
      placeBall: function() {
        var cornerX, cornerY;
        cornerX = Math.random() * (this.screenWidth - this.ballSize);
        cornerY = Math.random() * (this.screenHeight - this.ballSize);
        this.ballCanvas.css({
          "left": "" + cornerX + "px",
          "top": "" + cornerY + "px"
        });
        this.ballX = cornerX + this.ballSize / 2;
        return this.ballY = cornerY + this.ballSize / 2;
      },
      timeOut: function() {
        return this.stop();
      },
      stop: function() {
        var _this = this;
        if (this.running) {
          $(".time", this.resultBox).text("" + this.time);
          $(".hits", this.resultBox).text("" + this.hitCount);
          $(".miss", this.resultBox).text("" + this.missCount);
          $(".hits_per_min", this.resultBox).text("" + (Math.round(this.hitCount / this.time * 60)));
          this.resultBox.one("click", function() {
            return _this.hide();
          });
          this.resultBox.show();
          return this.running = false;
        }
      },
      hide: function() {
        this.screen.hide();
        return this.resultBox.hide();
      }
    };
    Game.hide();
    $(window).resize(function() {
      return Game.resizeScreen();
    });
    $(window).mousedown(function(evt) {
      var button, x, y, _ref;
      _ref = [evt.pageX, evt.pageY], x = _ref[0], y = _ref[1];
      button = (function() {
        switch (evt.which) {
          case 1:
            return "left";
          case 2:
            return "middle";
          case 3:
            return "right";
        }
      })();
      if ((button != null) && Game.click(x, y, button)) {
        return evt.preventDefault();
      }
    });
    $(window).bind("contextmenu", function(evt) {
      if (Game.running) {
        return evt.preventDefault();
      }
    });
    $(window).keydown(function(evt) {
      if (evt.which === 27) {
        return Game.stop();
      }
    });
    return $("#in-start").click(function() {
      var button, size, time;
      time = $("#in-time").val() * 1;
      size = $("#in-size").val() * 1;
      button = $("input[name=in-button]:checked").val();
      return Game.start({
        time: time,
        size: size,
        button: button
      });
    });
  });

}).call(this);
